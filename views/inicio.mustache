<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Inicio</title>
    <link rel="stylesheet" href="/public/css/header.css">
    <link rel="stylesheet" href="/public/css/footer.css">
    <link rel="stylesheet" href="/public/css/inicio.css">
</head>
<body>

<nav>
    <ul>
        <li><a href="/inicio">Inicio</a></li>
        <li><a href="/ranking">Ranking</a></li>
        <li><a href="/partidas">Partidas</a></li>
        <li><a href="/perfil">Perfil</a></li>
        <li><a href="/logout">Cerrar sesión</a></li>
    </ul>
</nav>

<main>
    {{#data}}
        {{#es_user}}
            <h1>Bienvenido {{nombre_de_usuario}} !</h1>
            <p>Tu puntaje máximo es: {{puntaje}}</p>
            <div class="centrado">
                <a href="/seleccionarCategoria">Jugar</a>
            </div>
            <div class="centrado">
                <a href="/crearPregunta">Crear pregunta</a>
            </div>
        {{/es_user}}
        {{#es_editor}}
            <div class="admin-seccion">
                <h2>Sección de Editor</h2>
                <a href="/editor/verificarPregunta">Ver preguntas a verificar</a>
                <a href="/editor/editarPreguntas">Editar preguntas</a>
                <a href="/editor/preguntasReportadas">Preguntas reportadas</a>
            </div>
        {{/es_editor}}
        {{#es_admin}}
            <div class="admin-seccion">
                <h1>Sección de Administrador</h1> <br> <br>
                <select id="filter">
                    <option value="week">Semana</option>
                    <option value="month">Mes</option>
                    <option value="year">Año</option>
                </select>
                <div>
                    <h3>Cantidad total de partidas jugadas</h3>
                    <canvas id="myChart"></canvas>
                </div> <br> <br>

                <!--  TABLA GRAFICA DE PARTIDAS  -->
                <table id="partidasTable">
                    <tr>
                        <th>Fecha</th>
                        <th>Total de las partidas</th>
                    </tr>
                    <!-- Las filas de datos se agregarán aquí con JavaScript -->
                </table>

                <div>
                    <h3>Cantidad total de usuarios por país</h3>
                    <canvas id="myChart2"></canvas>
                </div> <br> <br>
                <!--  TABLA GRAFICA DE Paises  -->
                <table id="paisesTable">
                    <tr>
                        <th>País</th>
                        <th>Total de usuarios</th>
                    </tr>
                    <!-- Las filas de datos se agregarán aquí con JavaScript -->
                </table>
                <div>
                    <h3>Cantidad total de usuarios por genero</h3>
                    <canvas id="myChart3"></canvas>
                </div> <br> <br>

                <!--  TABLA GRAFICA DE GENERO  -->
                <table id="genderTable">
                    <tr>
                        <th>Genero</th>
                        <th>Total usuarios</th>
                    </tr>
                    <!-- Las filas de datos se agregarán aquí con JavaScript -->
                </table>
            </div>

            <div class="centrado">
                <button id="exportAllCharts">Exportar Todos los Gráficos</button>
            </div>
        {{/es_admin}}
    {{/data}}
</main>

</body>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.debug.js"></script>
<script src="https://html2canvas.hertzen.com/dist/html2canvas.js"></script>

<!-- Ahora puedes usar Chart.js en tu código -->
<script>
    // Crear el gráfico inicialmente con datos vacíos
    var ctx1 = document.getElementById('myChart');
    var filterElement = document.getElementById('filter');

    if (ctx1 && filterElement) {
        var chart = new Chart(ctx1, {
            type: 'bar',
            data: {
                labels: [],
                datasets: [{
                    label: 'Cantidad total partidas jugadas',
                    data: [],
                    backgroundColor: 'rgba(78, 105, 209, 0.95)',
                    borderColor: 'rgba(78, 105, 209, 1)',
                    borderWidth: 1
                }]
            }
        });

        function updateTable(data) {
            var table = document.getElementById('partidasTable');
            // Clear the table
            while (table.rows.length > 1) {
                table.deleteRow(1);
            }
            // Add new rows
            for (var i = 0; i < data.data.grafico1.labels.length; i++) {
                var row = table.insertRow(-1);
                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                cell1.innerHTML = data.data.grafico1.labels[i];
                cell2.innerHTML = data.data.grafico1.values[i];
            }
        }

        // Función para actualizar el gráfico
        function updateChart1(filter) {
            fetch('/inicio/get?filter=' + filter, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        chart.data.labels = data.data.grafico1.labels;
                        chart.data.datasets[0].data = data.data.grafico1.values;
                        chart.update();
                        updateTable(data);
                    });
        }

        // Evento para cuando cambie el valor del select
        filterElement.addEventListener('change', function() {
            updateChart1(this.value);
        });

        // Actualizar el gráfico inicialmente
        updateChart1(filterElement.value);
    }

    // Create the second chart with empty data
    var ctx2 = document.getElementById('myChart2');

    if (ctx2) {
        var chart2 = new Chart(ctx2, {
            type: 'bar',
            data: {
                labels: [],
                datasets: [{
                    label: 'Cantidad total usuarios por país',
                    data: [],
                    backgroundColor: 'rgba(255, 99, 132, 0.95)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                }]
            }
        });
        function updateTable2(data) {
            var table = document.getElementById('paisesTable'); // Assuming you have a table with id 'usersCountryTable'
            // Clear the table
            while (table.rows.length > 1) {
                table.deleteRow(1);
            }
            // Add new rows
            for (var i = 0; i < data.data.grafico2.labels.length; i++) {
                var row = table.insertRow(-1);
                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                cell1.innerHTML = data.data.grafico2.labels[i];
                cell2.innerHTML = data.data.grafico2.values[i];
            }
        }
        // Function to update the second chart
        function updateChart2() {
            fetch('/inicio/get', {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        chart2.data.labels = data.data.grafico2.labels;
                        chart2.data.datasets[0].data = data.data.grafico2.values;
                        chart2.update();
                        updateTable2(data);
                    });
        }

        // Update the second chart initially
        updateChart2();
    }

    // Create the third chart (pie chart) with empty data
    var ctx3 = document.getElementById('myChart3');

    if (ctx3) {
        var chart3 = new Chart(ctx3, {
            type: 'pie',
            data: {
                labels: [],
                datasets: [{
                    data: [],
                    backgroundColor: [
                        'rgba(250,71,247,0.91)',
                        'rgba(23,112,171,0.91)',
                        'rgba(246,203,98,0.91)',
                        'rgba(75,192,192,0.91)',
                        'rgba(137,79,253,0.91)',
                        'rgba(252,13,50,0.91)'
                    ]
                }]
            }
        });

        function updateTable3(data) {
            var table = document.getElementById('genderTable'); // Assuming you have a table with id 'genderTable'
            // Clear the table
            while (table.rows.length > 1) {
                table.deleteRow(1);
            }
            // Add new rows
            for (var i = 0; i < data.data.grafico3.labels.length; i++) {
                var row = table.insertRow(-1);
                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                cell1.innerHTML = data.data.grafico3.labels[i];
                cell2.innerHTML = data.data.grafico3.values[i];
            }
        }

        // Function to update the third chart
        function updateChart3() {
            fetch('/inicio/get', {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        chart3.data.labels = data.data.grafico3.labels;
                        chart3.data.datasets[0].data = data.data.grafico3.values;
                        chart3.update();
                        updateTable3(data);
                    });
        }

        // Update the third chart initially
        updateChart3();
    }

    function exportAllChartsAndTablesToPDF(chartIds, tableIds, pdfName) {
        var pageSize = [595.28, 841.89];  // Tamaño de la hoja en puntos
        var doc = new jsPDF({ orientation: 'portrait', unit: 'pt', format: pageSize });
        var title = 'Reporte de Gráficos y Tablas';
        var titlePosition = [pageSize[0] / 2, 30];  // Posición del título (centrado horizontalmente, 30 puntos de margen en la parte superior)
        var elementSize = [pageSize[0] * 0.8, pageSize[1] * 0.3];  // Tamaño de los gráficos y tablas (80% del ancho de la hoja, 20% del alto de la hoja)

        var chartPromises = chartIds.map(function(chartId, index) {
            return html2canvas(document.getElementById(chartId)).then(function(canvas) {
                var imgData = canvas.toDataURL('image/png');
                var elementPosition = [(pageSize[0] - elementSize[0]) / 2, titlePosition[1] + 10 + (index * (elementSize[1] + 10))];  // Posición de los gráficos (centrado horizontalmente, 10 puntos de margen en la parte superior y entre gráficos)
                doc.addImage(imgData, 'PNG', elementPosition[0], elementPosition[1], elementSize[0], elementSize[1]);
            });
        });

        Promise.all(chartPromises).then(function() {
            doc.addPage();  // Añadir una nueva página después de agregar todos los gráficos

            var tablePromises = tableIds.map(function(tableId, index) {
                return html2canvas(document.getElementById(tableId)).then(function(canvas) {
                    var imgData = canvas.toDataURL('image/png');
                    var elementPosition = [(pageSize[0] - canvas.width) / 2, (pageSize[1] - canvas.height) / 2];  // Posición de las tablas (centrado horizontalmente y verticalmente)
                    doc.addImage(imgData, 'PNG', elementPosition[0], elementPosition[1], canvas.width, canvas.height);
                    if (index < tableIds.length - 1) {  // No añadir una nueva página después de la última tabla
                        doc.addPage();
                    }
                });
            });

            Promise.all(tablePromises).then(function() {
                doc.save(pdfName);
            });
        });
    }

    document.getElementById('exportAllCharts').addEventListener('click', function() {
        exportAllChartsAndTablesToPDF(['myChart', 'myChart2', 'myChart3'], ['partidasTable', 'paisesTable', 'genderTable'], 'AllChartsAndTables.pdf');
    });

</script>

</html>
